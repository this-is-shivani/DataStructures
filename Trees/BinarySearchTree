// Binary Search Tree
// {1,3,4,5,7,9}
import java.util.ArrayDeque;
import java.util.Deque;

public class Main{
    static class Node{
        int data;
        Node left, right;
        // Constructor
        Node(int data){
            this.data = data;
            left = null;
            right = null;
        }
    }
    
    //Insert node into BST
    public static Node insert(Node root, int data)
    {
        if(root==null)
            root = new Node(data);
        else if(data < root.data)
            root.left = insert(root.left, data);
        else
            root.right = insert(root.right,data);
        
        return root;
    }
    
    //In-order traversal of BST - gives sorted list
    public static void inOrderTraversal(Node root)
    {
        if(root==null)
            return;
        inOrderTraversal(root.left);
        System.out.print(root.data+" ");
        inOrderTraversal(root.right);
        
    }
    
    //Search in BST
    public static Node search(Node root, int key){
        if(root==null)
            return null;
            
        if(key<root.data)
            return search(root.left,key);
        else if(key>root.data)
            return search(root.right,key);
        else
            return root;
    }
    
    // Delete a node from BST
    public static Node delete(Node root, int val){
        if(val<root.data)
            root.left = delete(root.left, val);
        else if(val>root.data)
            root.right = delete(root.right, val);
        else
        {
            if(root.right==null && root.left==null)
                return null;
            else if(root.right==null)
                return root.left;
            else if(root.left==null)
                return root.right;
            else
            {
                Node IS = inorderSuccessor(root.right);
                root.data = IS.data;
                root.right = delete(root.right, IS.data);
            }
        }
        return root;
    }
    
    public static Node inorderSuccessor(Node root){
        // Go to the left-most node (leaf node)
        while(root.left!=null)
            root = root.left;
        // Return inorder successor
        return root;
    }
    
    public static void printRange(Node root, int x, int y){
        if(root==null)
            return;
        if(root.data>=x && root.data<=y)
        {
            printRange(root.left,x,y);
            System.out.print(root.data+" ");
            printRange(root.right,x,y);
        }
        else if(x>=root.data)
            printRange(root.right,x,y);
        else
            printRange(root.left,x,y);
    }
    
    // Print all the paths till leaves
    public static void Root2Leaf(Node root, Deque<Integer> path)
    {
        if(root==null)
            return;
            
        path.add(root.data);
        
        if(root.left==null && root.right==null)
            System.out.println(path);
        else
        {
           Root2Leaf(root.left, path);
            Root2Leaf(root.right, path); 
        }
        
        path.remove(path.size()-1);
    }
    
    //Driver code
    public static void main(String[] a){
    int[] array = {1,3,4,5,7,9,2,6,8};
    // Initialize root
    Node root = null;
    // Create BST
    for(int i=0; i<array.length; i++)
    {
        root = insert(root, array[i]);
    }
    // Print inorder traversal
    System.out.print("Inorder Traversal of BST:");
    inOrderTraversal(root);
    System.out.println();
    System.out.print("Is 5 present in tree? "+(search(root,5)!=null?true:false));
    System.out.println();
    System.out.print("Is 10 present in tree? "+(search(root,10)!=null?true:false));
    System.out.println();
    root = delete(root,5);
    System.out.print("After deleting 5:");
    inOrderTraversal(root);
    System.out.println();
    System.out.print("In range (3,7):");
    printRange(root,3,7);
    Deque<Integer> path = new ArrayDeque<Integer>();
    System.out.println();
    System.out.println("Paths:");
    Root2Leaf(root, path);
    }
}
