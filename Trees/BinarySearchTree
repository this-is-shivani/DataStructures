// Binary Search Tree
// {1,3,4,5,7,9}

public class Main{
    static class Node{
        int data;
        Node left, right;
        // Constructor
        Node(int data){
            this.data = data;
            left = null;
            right = null;
        }
    }
    
    //Insert node into BST
    public static Node insert(Node root, int data)
    {
        if(root==null)
            root = new Node(data);
        else if(data < root.data)
            root.left = insert(root.left, data);
        else
            root.right = insert(root.right,data);
        
        return root;
    }
    
    //In-order traversal of BST - gives sorted list
    public static void inOrderTraversal(Node root)
    {
        if(root==null)
            return;
        inOrderTraversal(root.left);
        System.out.print(root.data+" ");
        inOrderTraversal(root.right);
        
    }
    
    //Search in BST
    public static boolean search(Node root, int key){
        if(root==null)
            return false;
            
        if(key<root.data)
            return search(root.left,key);
        else if(key>root.data)
            return search(root.right,key);
        else
            return true;
    }
    
    //Driver code
    public static void main(String[] a){
    int[] array = {1,3,4,5,7,9};
    // Initialize root
    Node root = null;
    // Create BST
    for(int i=0; i<array.length; i++)
    {
        root = insert(root, array[i]);
    }
    // Print inorder traversal
    System.out.print("Inorder Traversal of BST:");
    inOrderTraversal(root);
    System.out.println();
    System.out.print("Is 5 present in tree? "+search(root,5));
    System.out.println();
    System.out.print("Is 8 present in tree? "+search(root,8));
    }
}
