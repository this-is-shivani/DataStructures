// HashSet: for creating sets
import java.util.HashSet;
import java.util.Iterator;
public class Solution {
    public static void main(String[] args) {
    // Create a HashSet & add using HashSet.add()/ addAll()
    HashSet<Integer> set1 = new HashSet<>();
    set1.add(1); set1.add(2); set1.add(4); set1.add(1); set1.add(3);
    HashSet<Integer> set2 = new HashSet<>();
    set2.add(4); set2.add(2); set2.add(6); set2.add(4); set2.add(5);
    // To iterate over set
    Iterator<Integer> itr1 = set1.iterator();
    Iterator<Integer> itr2 = set2.iterator();
    while(itr1.hasNext())
        System.out.print(itr1.next()+" ");
    System.out.println();
    while(itr2.hasNext())
        System.out.print(itr2.next()+" ");
    System.out.println();   
    System.out.println(set1.contains(5));  // Check if element is present in set HashSet.contains();
    // clear()/ size()/ isEmpty()/ remove(value)/ removeAll()
    // Union/ Difference/ Intersection
    HashSet<Integer> union = new HashSet<>(set1);
    union.addAll(set2);
    System.out.println(union);
    
    HashSet<Integer> intersection = new HashSet<>(set1);
    intersection.retainAll(set2);
    System.out.println(intersection);
    
    HashSet<Integer> diff1 = new HashSet<>(set1);
    HashSet<Integer> diff2 = new HashSet<>(set2);
    diff1.removeAll(set2);
    diff2.removeAll(set1);
    HashSet<Integer> diff = new HashSet<>(diff1);
    diff.addAll(diff2);
    System.out.println(diff);
    }
}
