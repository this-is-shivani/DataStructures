import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;

class Result {

    /*
     * 'isBalanced' function.
     * The function is expected to return a STRING.
     * The function accepts STRING s as parameter.
     */
    public static String isBalanced(String s) {
        Deque<Character> dq = new ArrayDeque<Character>();
        for(int i=0; i<s.length(); i++)
        {
            char x = s.charAt(i);
            if(x=='(' || x=='{' || x=='['){
                 dq.addLast(x);
            }else{
                if(dq.isEmpty())
                    return "NO";
                char ch = dq.pollLast();
                switch(x)
                {
                    case ')':
                        if(ch!='(')
                            return "NO";
                        break;
                    case '}':
                        if(ch!='{')
                            return "NO";
                        break;
                    case ']':
                        if(ch!='[')
                            return "NO";
                        break;
                }
            }
        }
        if(dq.isEmpty())
            return "YES";
        else
            return "NO";
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        for (int tItr = 0; tItr < t; tItr++) {
            String s = bufferedReader.readLine();

            String result = Result.isBalanced(s);

            bufferedWriter.write(result);
            bufferedWriter.newLine();
        }

        bufferedReader.close();
        bufferedWriter.close();
    }
}
